משימות:
1 ) בכל הפונקציות להגידר משתנים רק אם צריך ז"מ לא מחזירים משתנה\צורה ריקה אלא NULL
2) java docs על הכל חובה !
3) על כל פונקציה שכותבים עושה טסט למקרה קצרה ולמקרה רגיל ועדיף יותר
4) צריך לעשות TOSTRING לכל מה שב GEOMETRIES???
שאלות למרצה :
1)האם פונקצית החתיתוך צריכה לבדוק אם הגוף נמצא מלפני הקרן או מאחריה הרי קרן זה אין סופי
2)






    public java.awt.Color calcColor(GeoPoint p) {
        Color ambientLight = scene.get_ambientLight().get_intensity();//ambient
        Color emissionLight = p.geometry.get_emmission();//emission

        double r=addColors(ambientLight,emissionLight).getColor().getRed();
        double g=addColors(ambientLight,emissionLight).getColor().getGreen();
        double b=addColors(ambientLight,emissionLight).getColor().getBlue();
        for (LightSource light:scene.get_lights()) {
            Vector L = light.getL(p.point).normalize();
            Vector V = p.point.subtract(scene.get_camera().getPoint_3D()).normalize();
            Vector N = p.geometry.getNormal(p.point).normalize();
            Vector R= L.subtract(N.scale(2*(L.dotProduct(N))));
            //diffuse
            //System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
            //System.out.println("L"+light.getIntensity(p.point).getColor());
            //System.out.println("NL"+N.dotProduct(L));
            //System.out.println("r: "+r+" g: "+g+" b: "+b);
            if(N.dotProduct(L)>0) {
                r += N.dotProduct(L) * p.geometry.get_material().getkD() * light.getIntensity(p.point).getColor().getRed();
                g += N.dotProduct(L) * p.geometry.get_material().getkD() * light.getIntensity(p.point).getColor().getGreen();
                b += N.dotProduct(L) * p.geometry.get_material().getkD() * light.getIntensity(p.point).getColor().getBlue();
            }
            //specular
            //System.out.println("r: "+r+" g: "+g+" b: "+b);
            //System.out.println("VR"+V.dotProduct(R));
            if(V.dotProduct(R)>0) {
                double m = Math.pow(V.dotProduct(R), p.geometry.get_material().getnS()) * p.geometry.get_material().getkS();
                //System.out.println("m"+m);
                r += m * light.getIntensity(p.point).getColor().getRed();
                g += m * light.getIntensity(p.point).getColor().getGreen();
                b += m * light.getIntensity(p.point).getColor().getBlue();
            }
            //System.out.println("r: "+r+" g: "+g+" b: "+b);
        }
        //System.out.println("r: "+r+" g: "+g+" b: "+b);
        return  new Color(r > 255 ? 255 : r,g > 255 ? 255 : g, b> 255 ? 255 : b).getColor();
    }












    import primitives.*;
    import static java.lang.System.out;
    import static primitives.Util.*;

    /**
     * Test program for the 1st stage
     *
     * @author Dan Zilberstein
     */
    public final class Main {

        /**
         * Main program to tests initial functionality of the 1st stage
         *
         * @param args irrelevant here
         */
        public static void main(String[] args) {

            try { // test zero vector
                new Vector(0, 0, 0);
                out.println("ERROR: zero vector does not throw an exception");
            } catch (Exception e) {}

            Vector v1 = new Vector(1, 2, 3);
            Vector v2 = new Vector(-2, -4, -6);
            Vector v3 = new Vector(0, 3, -2);

            // test length..
            if (!isZero(v1.lengthSquared() - 14))
                out.println("ERROR: lengthSquared() wrong value");
            if (!isZero(new Vector(0, 3, 4).length() - 5))
                out.println("ERROR: length() wrong value");

            // test Dot-Product
            if (!isZero(v1.dotProduct(v3)))
                out.println("ERROR: dotProduct() for orthogonal vectors is not zero");
            if (!isZero(v1.dotProduct(v2) + 28))
                out.println("ERROR: dotProduct() wrong value");

            // test Cross-Product
            try { // test zero vector
                v1.crossProduct(v2);
                out.println("ERROR: crossProduct() for parallel vectors does not throw an exception");
            } catch (Exception e) {}
            Vector vr = v1.crossProduct(v3);
            if (!isZero(vr.length() - v1.length() * v3.length()))
                out.println("ERROR: crossProduct() wrong result length");
            if (!isZero(vr.dotProduct(v1)) || !isZero(vr.dotProduct(v3)))
                out.println("ERROR: crossProduct() result is not orthogonal to its operands");

            // test vector normalization vs vector length and cross-product
            Vector v = new Vector(1, 2, 3);
            Vector vCopy = new Vector(v);
            Vector vCopyNormalize = vCopy.normalize();
            if (vCopy != vCopyNormalize)
                out.println("ERROR: normalize() function creates a new vector");
            if (!isZero(vCopyNormalize.length() - 1))
                out.println("ERROR: normalize() result is not a unit vector");
            Vector u = v.normalized();
            if (u == v)
                out.println("ERROR: normalizated() function does not create a new vector");

            // Test operations with points and vectors
            Point3D p1 = new Point3D(1, 2, 3);
            if (!Point3D.ZERO.equals(p1.add(new Vector(-1, -2, -3))))
                out.println("ERROR: Point + Vector does not work correctly");
            if (!new Vector(1, 1, 1).equals(new Point3D(2, 3, 4).subtract(p1)))
                out.println("ERROR: Point - Point does not work correctly");

            out.println("If there were no any other outputs - all tests succeeded!");
        }
    }
